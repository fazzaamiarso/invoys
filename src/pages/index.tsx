import type { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { PlusIcon, TrashIcon, XMarkIcon } from '@heroicons/react/24/solid';
import { Dialog } from '@headlessui/react';
import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import {
  ColumnDef,
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from '@tanstack/react-table';
import { OrderItem } from '@prisma/client';

const Home: NextPage = () => {
  const [open, setOpen] = useState(true);

  return (
    <>
      <Head>
        <title>Invoicy</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className="w-screen min-h-screen flex">
        <NavigationPane />
        <section className="basis-[85%]">
          <header className="flex w-full px-12 py-4 border-b-2 border-b-gray-400">
            <button
              type="button"
              onClick={() => setOpen(true)}
              className="rounded-md px-4 py-1 bg-pink-500 text-white font-semibold flex items-center justify-center gap-2">
              <PlusIcon className="h-5 aspect-square" /> New Invoice
            </button>
            <div className="ml-auto flex items-center gap-4">
              <div className="font-semibold">Gojo Satoru</div>
              <div className="aspect-square w-10 rounded-full bg-pink-500" />
            </div>
          </header>
          <div className="p-12">
            <h2 className="text-3xl font-bold">Dashboard</h2>
          </div>
        </section>
        <NewInvoiceDrawer onClose={() => setOpen(false)} isOpen={open} />
      </main>
    </>
  );
};

export default Home;

declare module '@tanstack/react-table' {
  interface TableMeta {
    updateData: (rowIndex: number, columnId: string, value: unknown) => void;
    removeRow: (rowIndex: number) => void;
  }
}

const defaultColumn: Partial<ColumnDef<OrderItem>> = {
  cell: ({ getValue, row: { index }, column: { id }, table }) => {
    const initialValue = getValue();
    // eslint-disable-next-line react-hooks/rules-of-hooks
    const [value, setValue] = useState(initialValue);

    const onBlur = () => {
      table.options.meta?.updateData(index, id, value);
    };

    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(() => {
      setValue(initialValue);
    }, [initialValue]);

    return (
      <input
        type={typeof value === 'string' ? 'text' : 'number'}
        value={value as string}
        onChange={e => setValue(e.target.value)}
        onBlur={onBlur}
        className="w-20"
      />
    );
  },
};

const columnHelper = createColumnHelper<OrderItem>();
const columns = [
  columnHelper.accessor('name', {
    header: 'Item',
  }),
  columnHelper.accessor('quantity', {
    header: 'qty',
  }),
  columnHelper.accessor('amount', {
    header: 'price',
  }),
  columnHelper.accessor(row => `${row.amount * row.quantity}`, {
    header: 'total',
    cell: data => <span>{data.getValue()}</span>,
  }),
  columnHelper.display({
    id: 'actions',
    cell: cell => (
      <button
        type="button"
        onClick={() => cell.table.options.meta?.removeRow(cell.row.index)}>
        <TrashIcon className="h-4" />
      </button>
    ),
  }),
];

type DrawerProps = {
  onClose: () => void;
  isOpen: boolean;
};
const NewInvoiceDrawer = ({ onClose, isOpen }: DrawerProps) => {
  const { register, handleSubmit } = useForm();

  const [data, setData] = useState<OrderItem[]>([
    {
      id: '1',
      name: 'Landing page',
      amount: 750,
      quantity: 3,
      createdAt: new Date(),
      invoiceId: '1',
    },
  ]);

  const totalAmount = data.reduce(
    (acc, currOrder) => acc + currOrder.amount * currOrder.quantity,
    0
  );

  const table = useReactTable({
    columns,
    data,
    defaultColumn,
    getCoreRowModel: getCoreRowModel(),
    meta: {
      updateData: (rowIndex, columnId, value) => {
        setData(old =>
          old.map((row, index) => {
            if (index === rowIndex) {
              return {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                ...old[rowIndex]!,
                [columnId]: value,
              };
            }
            return row;
          })
        );
      },
      removeRow: rowIndex => {
        setData(old => old.filter((_, index) => index !== rowIndex));
      },
    },
  });
  return (
    <Dialog open={isOpen} onClose={onClose} className="relative z-50">
      <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
      <Dialog.Panel className="fixed shadow-sm right-0 inset-y-0 bg-white">
        <div className="relative p-6 w-[500px]">
          <div>
            <button className="h-6 aspect-square" onClick={onClose}>
              <XMarkIcon />
            </button>
          </div>
          <Dialog.Title className="font-bold text-xl">
            Create Invoice
          </Dialog.Title>
          <form onSubmit={handleSubmit(() => '')} className="space-y-8">
            <div className="flex flex-col gap-2">
              <label htmlFor="name">Project/description</label>
              <input type="text" {...register('name')} id="name" />
            </div>
            <div className="flex flex-col gap-2">
              <label htmlFor="currency">Currency</label>
              <input type="text" {...register('currency')} id="currency" />
            </div>
            <div className="flex flex-col gap-2">
              <label htmlFor="customer">Recipient</label>
              <input type="text" {...register('customer')} id="customer" />
            </div>
            <div className="flex flex-col gap-2">
              <label htmlFor="dueDate">Due Date</label>
              <input type="date" {...register('dueDate')} id="dueDate" />
            </div>
            {/* TABLE */}
            <div className="w-full">
              <table className="w-full">
                <thead className="">
                  {table.getFlatHeaders().map(header => (
                    <th key={header.id}>
                      {flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                    </th>
                  ))}
                </thead>
                <tbody>
                  {table.getRowModel().rows.map(row => {
                    return (
                      <tr key={row.id}>
                        {row.getVisibleCells().map(cell => {
                          return (
                            <td key={cell.id}>
                              {flexRender(
                                cell.column.columnDef.cell,
                                cell.getContext()
                              )}
                            </td>
                          );
                        })}
                      </tr>
                    );
                  })}
                </tbody>
              </table>
              {/* TABLE END */}
              <div className="w-full flex justify-between items-center">
                <button
                  type="button"
                  className="text-blue-500"
                  onClick={() =>
                    setData(prevData => [
                      ...prevData,
                      {
                        id: '',
                        name: '',
                        amount: 0,
                        quantity: 0,
                        createdAt: new Date(),
                        invoiceId: '1',
                      },
                    ])
                  }>
                  + add item
                </button>
                <div>Total {totalAmount}</div>
              </div>
            </div>
            <div className="flex flex-col gap-2">
              <label htmlFor="notes">Additional Notes</label>
              <textarea {...register('notes')} id="notes" />
            </div>
            <div className="flex items-center justify-between w-full">
              <button type="button" className="text-sm">
                PREVIEW
              </button>
              <button className="rounded-md px-4 py-2 bg-pink-500 text-white font-semibold flex items-center justify-center">
                Create Invoice
              </button>
            </div>
          </form>
        </div>
      </Dialog.Panel>
    </Dialog>
  );
};

const navigations = [
  { name: 'Dashboard', href: '/' },
  { name: 'Clients', href: '/clients' },
  { name: 'Invoices', href: '/invoices' },
  { name: 'Settings', href: '/settings' },
];

const NavigationPane = () => {
  return (
    <div className="p-4 space-y-12 h-screen border-r-gray-400 border-2 grow">
      <h1 className="text-xl font-bold">LOGO</h1>
      <nav className="">
        <ul className="space-y-8">
          {navigations.map(nav => {
            return (
              <li key={nav.name} className="">
                <Link href="#" className="hover:text-blue-500">
                  {nav.name}
                </Link>
              </li>
            );
          })}
        </ul>
      </nav>
    </div>
  );
};
