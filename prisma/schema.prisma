// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum InvoiceStatus {
    PENDING
    PAID
    REJECTED
    OVERDUE
}

enum UserRole {
    SUPER_ADMIN
    ADMIN
}

enum AccessOptions {
    UNRESTRICTED
    INVITE
}

model Invoice {
    id            String        @id @default(cuid())
    createdAt     DateTime      @default(now())
    name          String
    issuedOn      DateTime      @default(now())
    dueDate       DateTime
    notes         String?       @db.Text
    invoiceNumber String
    status        InvoiceStatus @default(PENDING)
    isDraft       Boolean       @default(false)

    orders     OrderItem[]
    customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
    customerId String

    @@index([customerId])
    @@fulltext([name, invoiceNumber])
}

model OrderItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    name      String
    amount    Int
    quantity  Int

    invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId String

    @@index([invoiceId])
}

model Customer {
    id            String    @id @default(uuid())
    createdAt     DateTime  @default(now())
    name          String
    email         String    @unique
    phoneNumber   String
    address       String?
    invoicePrefix String    @unique
    invoices      Invoice[]

    @@fulltext([email])
    @@fulltext([email, name])
}

model Settings {
    id              String        @id @default("settings")
    businessName    String        @default("")
    businessAddress String        @default("")
    businessPhone   String        @default("")
    businessEmail   String        @default("")
    access          AccessOptions @default(UNRESTRICTED)
    emails          Email[]
}

model Email {
    id         String   @id @default(uuid())
    isPending  Boolean  @default(false)
    name       String   @unique
    Settings   Settings @relation(fields: [settingsId], references: [id])
    settingsId String

    @@index([settingsId])
}

//NEXT AUTH STUFF
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    gradient      String?
    role          UserRole  @default(ADMIN)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
